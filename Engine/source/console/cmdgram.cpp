
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwCLIENTCMD	259
#define	rwSERVERCMD	260
#define	rwENDDEF	261
#define	rwDECLARE	262
#define	rwDECLARESINGLETON	263
#define	rwBREAK	264
#define	rwELSE	265
#define	rwCONTINUE	266
#define	rwGLOBAL	267
#define	rwIF	268
#define	rwNIL	269
#define	rwRETURN	270
#define	rwWHILE	271
#define	rwDO	272
#define	rwENDIF	273
#define	rwENDWHILE	274
#define	rwENDFOR	275
#define	rwDEFAULT	276
#define	rwFOR	277
#define	rwFOREACH	278
#define	rwFOREACHSTR	279
#define	rwIN	280
#define	rwDATABLOCK	281
#define	rwSWITCH	282
#define	rwCASE	283
#define	rwSWITCHSTR	284
#define	rwCASEOR	285
#define	rwPACKAGE	286
#define	rwNAMESPACE	287
#define	rwCLASS	288
#define	rwASSERT	289
#define	ILLEGAL_TOKEN	290
#define	CHRCONST	291
#define	INTCONST	292
#define	TTAG	293
#define	VAR	294
#define	IDENT	295
#define	TYPEIDENT	296
#define	DOCBLOCK	297
#define	STRATOM	298
#define	TAGATOM	299
#define	FLTCONST	300
#define	opINTNAME	301
#define	opINTNAMER	302
#define	opMINUSMINUS	303
#define	opPLUSPLUS	304
#define	STMT_SEP	305
#define	opSHL	306
#define	opSHR	307
#define	opPLASN	308
#define	opMIASN	309
#define	opMLASN	310
#define	opDVASN	311
#define	opMODASN	312
#define	opANDASN	313
#define	opXORASN	314
#define	opORASN	315
#define	opSLASN	316
#define	opSRASN	317
#define	opCAT	318
#define	opEQ	319
#define	opNE	320
#define	opGE	321
#define	opLE	322
#define	opAND	323
#define	opOR	324
#define	opSTREQ	325
#define	opCOLONCOLON	326
#define	opMDASN	327
#define	opNDASN	328
#define	opNTASN	329
#define	opSTRNE	330
#define	UNARY	331

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 55 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 69 "cmdgram.y"

        /* Operator Definitions */

#line 82 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		396
#define	YYFLAG		-32768
#define	YYNTBASE	102

#define YYTRANSLATE(x) ((unsigned)(x) <= 331 ? yytranslate[x] : 142)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    66,     2,     2,     2,    56,    55,     2,    57,
    58,    48,    46,    59,    47,    53,    49,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    60,    61,    50,
    52,    51,    98,    67,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    94,     2,   101,    64,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    62,    54,    63,    65,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    95,    96,    97,    99,
   100
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,    99,   108,
   109,   111,   113,   117,   128,   139,   147,   160,   170,   181,
   189,   190,   193,   194,   196,   197,   200,   201,   203,   205,
   208,   211,   215,   219,   221,   229,   237,   242,   250,   256,
   258,   262,   268,   276,   282,   289,   299,   308,   317,   325,
   334,   342,   350,   357,   365,   373,   375,   377,   381,   385,
   389,   393,   397,   401,   405,   409,   413,   416,   419,   421,
   427,   431,   435,   439,   443,   447,   451,   455,   459,   463,
   467,   471,   475,   479,   482,   485,   487,   489,   491,   493,
   495,   497,   499,   501,   503,   508,   512,   519,   523,   527,
   529,   533,   535,   537,   540,   543,   546,   549,   552,   555,
   558,   561,   564,   567,   569,   571,   573,   577,   584,   587,
   593,   596,   600,   606,   611,   618,   625,   630,   637,   638,
   640,   642,   646,   647,   649,   651,   654,   659,   665,   670,
   678,   687,   689
};

static const short yyrhs[] = {   103,
     0,     0,   103,   104,     0,   108,     0,   109,     0,   105,
     0,    31,    40,    62,   106,    63,    61,     0,   109,     0,
   106,   109,     0,     0,   107,   108,     0,   123,     0,   124,
     0,   125,     0,   126,     0,   112,     0,   120,     0,     9,
    61,     0,    11,    61,     0,    15,    61,     0,    15,   128,
    61,     0,   127,    61,     0,    38,    52,   128,    61,     0,
    38,    52,   128,    59,   128,    61,     0,    42,     0,     3,
    40,    57,   110,    58,    62,   107,    63,     0,     3,    40,
    93,    40,    57,   110,    58,    62,   107,    63,     0,     4,
    40,    57,   110,    58,    62,   107,    63,     0,     5,    40,
    57,   110,    58,    62,   107,    63,     0,     0,   111,     0,
    39,     0,   111,    59,    39,     0,    26,   131,    57,   128,
   114,    58,    62,   138,    63,    61,     0,     7,   131,    57,
   115,   114,   116,    58,    62,   117,    63,     0,     7,   131,
    57,   115,   114,   116,    58,     0,     7,   131,    57,    94,
   115,   101,   114,   116,    58,    62,   117,    63,     0,     7,
   131,    57,    94,   115,   101,   114,   116,    58,     0,     8,
   131,    57,   115,   114,   116,    58,    62,   117,    63,     0,
     8,   131,    57,   115,   114,   116,    58,     0,     0,    60,
    40,     0,     0,   128,     0,     0,    59,   137,     0,     0,
   139,     0,   118,     0,   139,   118,     0,   113,    61,     0,
   118,   113,    61,     0,    62,   107,    63,     0,   108,     0,
    27,    57,   128,    58,    62,   121,    63,     0,    29,    57,
   128,    58,    62,   121,    63,     0,    28,   122,    60,   107,
     0,    28,   122,    60,   107,    21,    60,   107,     0,    28,
   122,    60,   107,   121,     0,   128,     0,   122,    30,   128,
     0,    13,    57,   128,    58,   119,     0,    13,    57,   128,
    58,   119,    10,   119,     0,    16,    57,   128,    58,   119,
     0,    17,   119,    16,    57,   128,    58,     0,    22,    57,
   128,    61,   128,    61,   128,    58,   119,     0,    22,    57,
   128,    61,   128,    61,    58,   119,     0,    22,    57,   128,
    61,    61,   128,    58,   119,     0,    22,    57,   128,    61,
    61,    58,   119,     0,    22,    57,    61,   128,    61,   128,
    58,   119,     0,    22,    57,    61,   128,    61,    58,   119,
     0,    22,    57,    61,    61,   128,    58,   119,     0,    22,
    57,    61,    61,    58,   119,     0,    23,    57,    39,    25,
   128,    58,   119,     0,    24,    57,    39,    25,   128,    58,
   119,     0,   133,     0,   133,     0,    57,   128,    58,     0,
   128,    64,   128,     0,   128,    56,   128,     0,   128,    55,
   128,     0,   128,    54,   128,     0,   128,    46,   128,     0,
   128,    47,   128,     0,   128,    48,   128,     0,   128,    49,
   128,     0,    47,   128,     0,    48,   128,     0,    38,     0,
   128,    98,   128,    60,   128,     0,   128,    50,   128,     0,
   128,    51,   128,     0,   128,    88,   128,     0,   128,    89,
   128,     0,   128,    86,   128,     0,   128,    87,   128,     0,
   128,    91,   128,     0,   128,    73,   128,     0,   128,    74,
   128,     0,   128,    90,   128,     0,   128,    92,   128,     0,
   128,    99,   128,     0,   128,    67,   128,     0,    66,   128,
     0,    65,   128,     0,    44,     0,    45,     0,    37,     0,
     9,     0,   129,     0,   130,     0,    40,     0,    43,     0,
    39,     0,    39,    94,   141,   101,     0,   128,    53,    40,
     0,   128,    53,    40,    94,   141,   101,     0,   128,    68,
   131,     0,   128,    69,   131,     0,    40,     0,    57,   128,
    58,     0,    71,     0,    70,     0,    75,   128,     0,    76,
   128,     0,    77,   128,     0,    78,   128,     0,    79,   128,
     0,    80,   128,     0,    81,   128,     0,    82,   128,     0,
    83,   128,     0,    84,   128,     0,   134,     0,   135,     0,
   113,     0,    39,    52,   128,     0,    39,    94,   141,   101,
    52,   128,     0,    39,   132,     0,    39,    94,   141,   101,
   132,     0,   129,   132,     0,   129,    52,   128,     0,   129,
    52,    62,   137,    63,     0,    40,    57,   136,    58,     0,
    40,    93,    40,    57,   136,    58,     0,   128,    53,    40,
    57,   136,    58,     0,    34,    57,   128,    58,     0,    34,
    57,   128,    59,    43,    58,     0,     0,   137,     0,   128,
     0,   137,    59,   128,     0,     0,   139,     0,   140,     0,
   139,   140,     0,    40,    52,   128,    61,     0,    41,    40,
    52,   128,    61,     0,    26,    52,   128,    61,     0,    40,
    94,   141,   101,    52,   128,    61,     0,    41,    40,    94,
   141,   101,    52,   128,    61,     0,   128,     0,   141,    59,
   128,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   161,   166,   168,   173,   175,   177,   182,   187,   189,   194,
   196,   201,   202,   203,   204,   205,   206,   207,   209,   211,
   213,   215,   217,   219,   221,   226,   228,   230,   232,   237,
   239,   244,   246,   251,   256,   258,   260,   262,   264,   266,
   271,   273,   278,   280,   285,   287,   292,   294,   296,   298,
   303,   305,   310,   312,   317,   319,   324,   326,   328,   333,
   335,   340,   342,   347,   349,   354,   356,   358,   360,   362,
   364,   366,   368,   373,   375,   380,   385,   387,   389,   391,
   393,   395,   397,   399,   401,   403,   405,   407,   409,   411,
   413,   415,   417,   419,   421,   423,   425,   427,   429,   431,
   433,   435,   437,   439,   441,   443,   445,   447,   449,   451,
   453,   455,   457,   459,   461,   466,   468,   473,   475,   480,
   482,   487,   489,   491,   493,   495,   497,   499,   501,   503,
   505,   507,   509,   514,   516,   518,   520,   522,   524,   526,
   528,   530,   532,   537,   539,   541,   546,   548,   553,   555,
   560,   562,   567,   569,   574,   576,   581,   583,   585,   587,
   589,   594,   596
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwCLIENTCMD","rwSERVERCMD","rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK",
"rwELSE","rwCONTINUE","rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO",
"rwENDIF","rwENDWHILE","rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR",
"rwIN","rwDATABLOCK","rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE",
"rwNAMESPACE","rwCLASS","rwASSERT","ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG",
"VAR","IDENT","TYPEIDENT","DOCBLOCK","STRATOM","TAGATOM","FLTCONST","'+'","'-'",
"'*'","'/'","'<'","'>'","'='","'.'","'|'","'&'","'%'","'('","')'","','","':'",
"';'","'{'","'}'","'^'","'~'","'!'","'@'","opINTNAME","opINTNAMER","opMINUSMINUS",
"opPLUSPLUS","STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN","opDVASN",
"opMODASN","opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT","opEQ",
"opNE","opGE","opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN",
"opNDASN","opNTASN","'?'","opSTRNE","UNARY","']'","start","decl_list","decl",
"package_decl","fn_decl_list","statement_list","stmt","fn_decl_stmt","var_list_decl",
"var_list","datablock_decl","object_decl","parent_block","object_name","object_args",
"object_declare_block","object_decl_list","stmt_block","switch_stmt","case_block",
"case_expr","if_stmt","while_stmt","for_stmt","foreach_stmt","expression_stmt",
"expr","slot_acc","intslot_acc","class_name_expr","assign_op_struct","stmt_expr",
"funcall_expr","assert_expr","expr_list_decl","expr_list","slot_assign_list_opt",
"slot_assign_list","slot_assign","aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
   102,   103,   103,   104,   104,   104,   105,   106,   106,   107,
   107,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   109,   109,   109,   109,   110,
   110,   111,   111,   112,   113,   113,   113,   113,   113,   113,
   114,   114,   115,   115,   116,   116,   117,   117,   117,   117,
   118,   118,   119,   119,   120,   120,   121,   121,   121,   122,
   122,   123,   123,   124,   124,   125,   125,   125,   125,   125,
   125,   125,   125,   126,   126,   127,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   129,   129,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   134,   134,   134,   135,   135,   136,   136,
   137,   137,   138,   138,   139,   139,   140,   140,   140,   140,
   140,   141,   141
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,     8,     8,     0,
     1,     1,     3,    10,    10,     7,    12,     9,    10,     7,
     0,     2,     0,     1,     0,     2,     0,     1,     1,     2,
     2,     3,     3,     1,     7,     7,     4,     7,     5,     1,
     3,     5,     7,     5,     6,     9,     8,     8,     7,     8,
     7,     7,     6,     7,     7,     1,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     2,     2,     1,     5,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     3,     6,     3,     3,     1,
     3,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     1,     1,     3,     6,     2,     5,
     2,     3,     5,     4,     6,     6,     4,     6,     0,     1,
     1,     3,     0,     1,     1,     2,     4,     5,     4,     7,
     8,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,     0,     0,   109,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   108,    89,   114,   112,    25,   113,   106,   107,     0,     0,
     0,     0,     0,     3,     6,     4,     5,    16,   136,    17,
    12,    13,    14,    15,     0,     0,   110,   111,    77,   134,
   135,     0,     0,     0,   120,     0,     0,     0,    18,    19,
     0,   109,    89,    20,     0,    77,     0,    10,    54,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   123,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,   149,     0,    87,    88,     0,   105,
   104,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   141,    30,
     0,    30,    30,     0,    43,    43,     0,    21,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   162,     0,   151,     0,   150,     0,    78,    83,
    84,    85,    86,    91,    92,   116,    82,    81,    80,    79,
   103,   118,   119,    98,    99,    95,    96,    93,    94,   100,
    97,   101,     0,   102,     0,   142,    32,     0,    31,     0,
     0,     0,   121,    43,    41,    44,    41,     0,     0,    53,
    11,     0,     0,     0,     0,     0,     0,    41,     0,     0,
     0,     8,   147,     0,     0,    23,     0,   115,   144,     0,
   149,   149,     0,     0,     0,     0,     0,    30,     0,     0,
     0,     0,    45,    45,    62,    64,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,     0,
     0,   163,     0,   140,   152,     0,     0,     0,    90,   143,
    10,    33,     0,    10,    10,    41,    42,     0,     0,     0,
     0,    65,    73,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     7,   148,    24,   138,   145,
   146,   117,     0,     0,     0,     0,    45,    46,    36,    40,
    63,    72,    71,     0,    69,     0,     0,     0,    74,    75,
   153,     0,    60,    55,    56,    26,    10,    28,    29,     0,
    47,    47,    70,    68,    67,     0,     0,     0,     0,     0,
   154,   155,     0,    10,     0,    38,     0,     0,    49,    48,
     0,    66,     0,     0,     0,     0,     0,   156,    61,    57,
    27,    47,    51,    35,     0,    50,    39,     0,     0,     0,
     0,     0,    34,     0,    59,     0,    52,   159,   157,     0,
     0,     0,    10,    37,     0,   158,     0,    58,     0,     0,
   160,     0,   161,     0,     0,     0
};

static const short yydefgoto[] = {   394,
     1,    34,    35,   221,   140,    69,    37,   198,   199,    38,
    39,   243,   205,   279,   348,   349,    70,    40,   294,   322,
    41,    42,    43,    44,    45,    46,    47,    48,    57,    94,
    66,    50,    51,   166,   167,   340,   350,   342,   164
};

static const short yypact[] = {-32768,
   389,   -23,    -7,    -5,    15,    15,   -59,    34,    11,   289,
    70,   481,    92,    95,   114,    15,   121,   122,    16,   123,
-32768,   129,    80,   -47,-32768,-32768,-32768,-32768,  1126,  1126,
  1126,  1126,  1126,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   130,  2589,  2813,-32768,   133,-32768,
-32768,     4,   126,   141,-32768,  1126,   142,   146,-32768,-32768,
  1126,-32768,-32768,-32768,  1239,-32768,  1126,-32768,-32768,   184,
   790,   165,   166,   152,  1126,  1126,   150,  1126,  1126,  1126,
-32768,-32768,  1126,  1126,  1126,  1126,  1126,  1126,  1126,  1126,
  1126,  1126,  1126,-32768,  1126,   176,   101,   101,  1293,   101,
   101,-32768,  1126,  1126,  1126,  1126,  1126,  1126,   177,  1126,
  1126,  1126,  1126,  1126,    15,    15,  1126,  1126,  1126,  1126,
  1126,  1126,  1126,  1126,  1126,  1126,  1126,   832,-32768,   179,
   180,   179,   179,  1347,     5,  1126,  1401,-32768,  1455,   541,
   167,   874,  1509,   201,   202,  1126,  1563,  1617,   172,  1131,
  1185,  2589,  2589,  2589,  2589,  2589,  2589,  2589,  2589,  2589,
  2589,  2589,  2589,   -54,  2589,   175,   185,   186,-32768,   312,
   312,   101,   101,   226,   226,   -37,  2730,  2788,   101,  2759,
  2868,-32768,-32768,   796,   796,   189,   189,   226,   226,  2701,
  2672,  2868,  1671,  2868,  1126,  2589,-32768,   188,   191,   194,
   195,   196,-32768,  1126,   174,  2589,   174,   481,   481,-32768,
-32768,  1126,   916,  1725,   958,  1126,  1126,  1779,   190,   193,
   143,-32768,-32768,   216,  1126,-32768,  1126,  2829,-32768,  1126,
  1126,  1126,  1126,  1126,   109,   198,   225,   179,   203,   204,
   168,   227,   209,   209,   260,-32768,  1833,   481,  1887,  1000,
  1042,  1941,  1995,  2049,   213,   257,   257,   231,-32768,   243,
  2103,  2589,  1126,-32768,  2589,   245,   249,   -50,  2643,-32768,
-32768,-32768,   252,-32768,-32768,   174,-32768,  1126,   253,   254,
   481,-32768,-32768,   481,   481,  2157,   481,  2211,  1084,   481,
   481,   255,  1126,   251,   256,-32768,-32768,-32768,  2589,-32768,
-32768,-32768,   586,   258,   631,   676,   209,   185,   259,   262,
-32768,-32768,-32768,   481,-32768,   481,   481,  2265,-32768,-32768,
   147,     7,  2589,-32768,-32768,-32768,-32768,-32768,-32768,   264,
   331,   331,-32768,-32768,-32768,   481,   278,   -36,   291,   277,
   147,-32768,  1126,-32768,   721,   280,   282,   284,    33,   331,
   286,-32768,  1126,  1126,  1126,   -34,   295,-32768,  2589,   436,
-32768,   331,-32768,-32768,   297,    33,-32768,  2319,  2373,   -38,
  1126,  1126,-32768,   285,-32768,   299,-32768,-32768,-32768,   314,
  2427,   -21,-32768,-32768,  1126,-32768,   315,   766,  2481,  1126,
-32768,  2535,-32768,   364,   373,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -252,     3,  -142,  -108,-32768,-32768,
  -165,  -111,  -104,  -241,  -268,    24,   -95,-32768,  -223,-32768,
-32768,-32768,-32768,-32768,-32768,    -2,-32768,-32768,    20,   -46,
    -1,-32768,-32768,   -90,  -180,-32768,    54,  -212,  -227
};


#define	YYLAST		2942


static const short yytable[] = {    49,
   129,    59,   280,    36,   227,   268,   222,    65,   227,    95,
    49,     5,     6,    62,   235,   354,    52,   371,   303,   232,
   227,   305,   306,   201,   202,    58,    97,    98,    99,   100,
   101,   207,    53,   295,    54,    74,   343,   227,    20,     5,
     6,    21,    63,    23,    24,    96,   228,    26,    27,    28,
   302,    29,    30,   134,    55,    77,   233,   355,   137,   372,
   130,    31,   380,   351,   139,   330,   344,    61,   143,    32,
    33,    56,   147,   148,   345,   150,   151,   152,   259,   387,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   360,   165,   376,    60,   244,   131,   308,   204,   241,
   170,   171,   172,   173,   174,   175,   255,   177,   178,   179,
   180,   181,   245,   246,   184,   185,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   196,    67,   370,   358,   273,
   388,    80,   206,   206,   182,   183,   375,   358,    49,   214,
   266,   267,   211,   218,   382,     2,     3,     4,    71,    81,
    82,    72,   283,   109,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,   307,   347,   347,   230,   115,   116,
    73,   270,   337,    93,     2,     3,     4,    75,    76,    78,
    79,   264,   132,   365,   347,   311,   338,   339,   312,   313,
   102,   315,   165,   -76,   319,   320,   347,   133,   135,   141,
   365,   206,   136,   144,   145,   258,    49,    49,   146,   247,
   249,   149,   252,   253,   254,   168,   176,   197,   333,   200,
   334,   335,   261,   212,   262,   216,   217,   265,   165,   165,
   163,   269,   229,   242,   103,   104,   105,   106,   107,   108,
   352,   109,   231,   230,   112,   236,    49,   286,   288,   237,
   238,   256,   239,   240,   257,   114,   115,   116,   260,   271,
   299,   117,   118,   272,   274,   275,   277,   278,   276,   281,
   292,   103,   104,   105,   106,   165,   121,   122,   109,    49,
   125,   112,    49,    49,   293,    49,   318,   127,    49,    49,
   323,   296,   114,   115,   116,     5,     6,    62,   117,   118,
   297,    49,   300,    49,    49,   211,   301,   211,   211,   304,
   309,   310,    49,   324,    49,    49,   321,   125,   325,   327,
   331,   346,    20,   332,   127,    21,    63,    23,    24,   353,
   356,    26,    27,    28,    49,    29,    30,     5,     6,   357,
   359,   362,   363,    49,   383,    31,   364,   211,   367,    64,
   368,   369,   163,    32,    33,   373,   337,   377,    49,   105,
   106,   384,   211,   395,   109,   385,   390,   112,   381,   163,
   338,   339,   396,   366,   341,     0,     0,     0,     0,   115,
   116,     0,   389,     0,     0,     0,    49,   392,     0,     0,
   211,     2,     3,     4,     0,     5,     6,     7,     0,     8,
     0,     9,     0,    10,    11,    12,     0,     0,     0,     0,
    13,    14,    15,     0,    16,    17,     0,    18,     0,    19,
     0,     0,    20,     0,     0,    21,    22,    23,    24,     0,
    25,    26,    27,    28,     0,    29,    30,     0,     0,     0,
     0,     0,     5,     6,     7,    31,     8,     0,     9,     0,
    10,    11,    12,    32,    33,     0,   374,    13,    14,    15,
     0,    16,    17,   293,    18,     0,     0,     0,     0,    20,
     0,     0,    21,    22,    23,    24,     0,    25,    26,    27,
    28,     0,    29,    30,     0,     0,     0,     5,     6,     7,
     0,     8,    31,     9,     0,    10,    11,    12,     0,     0,
    32,    33,    13,    14,    15,     0,    16,    17,     0,    18,
     0,     0,     0,     0,    20,     0,     0,    21,    22,    23,
    24,     0,    25,    26,    27,    28,     0,    29,    30,     0,
     0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
     0,     0,    68,     0,     0,    32,    33,     5,     6,     7,
     0,     8,     0,     9,     0,    10,    11,    12,     0,     0,
     0,     0,    13,    14,    15,     0,    16,    17,     0,    18,
     0,     0,     0,     0,    20,     0,     0,    21,    22,    23,
    24,     0,    25,    26,    27,    28,     0,    29,    30,     0,
     0,     0,     5,     6,     7,     0,     8,    31,     9,     0,
    10,    11,    12,   210,     0,    32,    33,    13,    14,    15,
     0,    16,    17,     0,    18,     0,     0,     0,     0,    20,
     0,     0,    21,    22,    23,    24,     0,    25,    26,    27,
    28,     0,    29,    30,     0,     0,     0,     5,     6,     7,
     0,     8,    31,     9,     0,    10,    11,    12,   326,     0,
    32,    33,    13,    14,    15,     0,    16,    17,     0,    18,
     0,     0,     0,     0,    20,     0,     0,    21,    22,    23,
    24,     0,    25,    26,    27,    28,     0,    29,    30,     0,
     0,     0,     5,     6,     7,     0,     8,    31,     9,     0,
    10,    11,    12,   328,     0,    32,    33,    13,    14,    15,
     0,    16,    17,     0,    18,     0,     0,     0,     0,    20,
     0,     0,    21,    22,    23,    24,     0,    25,    26,    27,
    28,     0,    29,    30,     0,     0,     0,     5,     6,     7,
     0,     8,    31,     9,     0,    10,    11,    12,   329,     0,
    32,    33,    13,    14,    15,     0,    16,    17,     0,    18,
     0,     0,     0,     0,    20,     0,     0,    21,    22,    23,
    24,     0,    25,    26,    27,    28,     0,    29,    30,     0,
     0,     0,     5,     6,     7,     0,     8,    31,     9,     0,
    10,    11,    12,   361,     0,    32,    33,    13,    14,    15,
     0,    16,    17,     0,    18,     0,     5,     6,    62,    20,
     0,     0,    21,    22,    23,    24,     0,    25,    26,    27,
    28,     0,    29,    30,     0,     0,     0,     0,     0,     0,
     0,     0,    31,    20,     0,     0,    21,    63,    23,    24,
    32,    33,    26,    27,    28,     0,    29,    30,     5,     6,
    62,   103,   104,   105,   106,     0,    31,     0,   109,     0,
   142,   112,     0,     0,    32,    33,     0,     0,     0,     0,
     0,     0,     0,   115,   116,    20,     0,     0,    21,    63,
    23,    24,     0,     0,    26,    27,    28,     0,    29,    30,
     5,     6,    62,     0,     0,     0,     0,     0,    31,     0,
     0,     0,     0,   195,     0,     0,    32,    33,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
    21,    63,    23,    24,     0,     0,    26,    27,    28,     0,
    29,    30,     5,     6,    62,     0,     0,     0,     0,     0,
    31,     0,     0,     0,   213,     0,     0,     0,    32,    33,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
     0,     0,    21,    63,    23,    24,     0,     0,    26,    27,
    28,     0,    29,    30,     5,     6,    62,     0,     0,     0,
     0,     0,    31,   248,     0,     0,     0,     0,     0,     0,
    32,    33,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    20,     0,     0,    21,    63,    23,    24,     0,     0,
    26,    27,    28,     0,    29,    30,     5,     6,    62,     0,
     0,     0,     0,     0,    31,     0,     0,     0,   251,     0,
     0,     0,    32,    33,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    20,     0,     0,    21,    63,    23,    24,
     0,     0,    26,    27,    28,     0,    29,    30,     5,     6,
    62,     0,     0,     0,     0,     0,    31,   285,     0,     0,
     0,     0,     0,     0,    32,    33,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    20,     0,     0,    21,    63,
    23,    24,     0,     0,    26,    27,    28,     0,    29,    30,
     5,     6,    62,     0,     0,     0,     0,     0,    31,   287,
     0,     0,     0,     0,     0,     0,    32,    33,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
    21,    63,    23,    24,     0,     0,    26,    27,    28,     0,
    29,    30,     5,     6,    62,     0,     0,     0,     0,     0,
    31,   317,     0,     0,     0,     0,     0,     0,    32,    33,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
     0,     0,    21,    63,    23,    24,     0,     0,    26,    27,
    28,     0,    29,    30,     0,     0,   103,   104,   105,   106,
   107,   108,    31,   109,   110,   111,   112,     0,   223,   224,
    32,    33,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,     0,   225,     0,   226,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,     0,     0,     0,   138,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
   169,     0,     0,     0,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
   126,   127,   103,   104,   105,   106,   107,   108,     0,   109,
   110,   111,   112,     0,   203,     0,     0,     0,     0,     0,
   113,     0,     0,   114,   115,   116,     0,     0,     0,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,   126,   127,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,     0,   208,     0,
     0,     0,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,   209,     0,     0,     0,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,     0,     0,     0,   215,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
   219,     0,     0,     0,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
   126,   127,   103,   104,   105,   106,   107,   108,     0,   109,
   110,   111,   112,     0,   220,     0,     0,     0,     0,     0,
   113,     0,     0,   114,   115,   116,     0,     0,     0,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,   126,   127,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,     0,     0,     0,
   234,     0,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,     0,     0,     0,   250,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,     0,     0,   242,     0,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
   282,     0,     0,     0,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
   126,   127,   103,   104,   105,   106,   107,   108,     0,   109,
   110,   111,   112,     0,   284,     0,     0,     0,     0,     0,
   113,     0,     0,   114,   115,   116,     0,     0,     0,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,   126,   127,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,     0,     0,     0,
     0,   289,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,   290,     0,     0,     0,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,   291,     0,     0,     0,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
     0,     0,     0,   298,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
   126,   127,   103,   104,   105,   106,   107,   108,     0,   109,
   110,   111,   112,     0,   314,     0,     0,     0,     0,     0,
   113,     0,     0,   114,   115,   116,     0,     0,     0,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,   126,   127,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,     0,   316,     0,
     0,     0,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,   336,     0,     0,     0,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,     0,     0,     0,   378,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
     0,     0,     0,   379,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
   126,   127,   103,   104,   105,   106,   107,   108,     0,   109,
   110,   111,   112,     0,     0,     0,     0,   386,     0,     0,
   113,     0,     0,   114,   115,   116,     0,     0,     0,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,   126,   127,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,     0,     0,     0,
     0,   391,     0,     0,   113,     0,     0,   114,   115,   116,
     0,     0,     0,   117,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
   103,   104,   105,   106,   107,   108,     0,   109,   110,   111,
   112,     0,     0,     0,     0,   393,     0,     0,   113,     0,
     0,   114,   115,   116,     0,     0,     0,   117,   118,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
     0,     0,   126,   127,   103,   104,   105,   106,   107,   108,
     0,   109,   110,   111,   112,     0,     0,     0,     0,     0,
     0,     0,   113,     0,     0,   114,   115,   116,     0,     0,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,   126,   127,   103,   104,
   105,   106,   107,   108,     0,   109,   110,   111,   112,     0,
     0,     0,     0,     0,     0,     0,   113,     0,     0,   114,
   115,   116,     0,     0,     0,   117,   118,   103,   104,   105,
   106,   107,   108,     0,   109,   110,   111,   112,   119,   120,
   121,   122,   123,   124,   125,   113,     0,     0,   114,   115,
   116,   127,     0,     0,   117,   118,   103,   104,   105,   106,
   107,   108,     0,   109,   110,   111,   112,   119,   120,   121,
   122,   123,     0,   125,   113,     0,     0,   114,   115,   116,
   127,     0,     0,   117,   118,   103,   104,   105,   106,   107,
   108,     0,   109,     0,   111,   112,   119,   120,   121,   122,
     0,     0,   125,   113,     0,     0,   114,   115,   116,   127,
     0,     0,   117,   118,   103,   104,   105,   106,   107,   108,
     0,   109,     0,   111,   112,   119,   120,   121,   122,     0,
     0,   125,     0,     0,     0,   114,   115,   116,   127,     0,
     0,   117,   118,   103,   104,   105,   106,   107,   108,     0,
   109,     0,     0,   112,   119,   120,   121,   122,     0,     0,
   125,     0,     0,     0,   114,   115,   116,   127,     0,     0,
   117,   118,     0,     0,   128,     0,     0,     0,     0,     0,
     0,     0,     0,   119,   120,   121,   122,     0,     0,   125,
   263,     0,    81,    82,     0,     0,   127,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,     0,    81,    82,
     0,     0,     0,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,   103,   104,   105,   106,     0,     0,     0,
   109,     0,     0,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   115,   116,     0,     0,     0,
   117,   118
};

static const short yycheck[] = {     1,
    47,    61,   244,     1,    59,   233,   149,    10,    59,    57,
    12,     7,     8,     9,   195,    52,    40,    52,   271,    57,
    59,   274,   275,   132,   133,     6,    29,    30,    31,    32,
    33,   136,    40,   257,    40,    16,    30,    59,    34,     7,
     8,    37,    38,    39,    40,    93,   101,    43,    44,    45,
   101,    47,    48,    56,    40,    40,    94,    94,    61,    94,
    57,    57,   101,   332,    67,   307,    60,    57,    71,    65,
    66,    57,    75,    76,   327,    78,    79,    80,   221,   101,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,   344,    95,   362,    61,   207,    93,   278,    94,   204,
   103,   104,   105,   106,   107,   108,   218,   110,   111,   112,
   113,   114,   208,   209,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,    57,   355,   341,   238,
   383,    52,   135,   136,   115,   116,   360,   350,   140,   142,
   231,   232,   140,   146,   372,     3,     4,     5,    57,    70,
    71,    57,   248,    53,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,   276,   331,   332,    59,    68,    69,
    57,    63,    26,    94,     3,     4,     5,    57,    57,    57,
    52,   228,    57,   349,   350,   281,    40,    41,   284,   285,
    61,   287,   195,    61,   290,   291,   362,    57,    57,    16,
   366,   204,    57,    39,    39,    63,   208,   209,    57,   212,
   213,    62,   215,   216,   217,    40,    40,    39,   314,    40,
   316,   317,   225,    57,   227,    25,    25,   230,   231,   232,
   233,   234,    58,    60,    46,    47,    48,    49,    50,    51,
   336,    53,    57,    59,    56,    58,   248,   250,   251,    59,
    57,    62,    58,    58,    62,    67,    68,    69,    43,    62,
   263,    73,    74,    39,    62,    62,    40,    59,   101,    10,
    58,    46,    47,    48,    49,   278,    88,    89,    53,   281,
    92,    56,   284,   285,    28,   287,   289,    99,   290,   291,
   293,    61,    67,    68,    69,     7,     8,     9,    73,    74,
    58,   303,    58,   305,   306,   303,    58,   305,   306,    58,
    58,    58,   314,    63,   316,   317,    62,    92,    63,    62,
    62,    58,    34,    62,    99,    37,    38,    39,    40,    52,
    40,    43,    44,    45,   336,    47,    48,     7,     8,    63,
   343,    62,    61,   345,    60,    57,    63,   345,    63,    61,
   353,   354,   355,    65,    66,    61,    26,    61,   360,    48,
    49,    63,   360,     0,    53,    52,    52,    56,   371,   372,
    40,    41,     0,   350,   321,    -1,    -1,    -1,    -1,    68,
    69,    -1,   385,    -1,    -1,    -1,   388,   390,    -1,    -1,
   388,     3,     4,     5,    -1,     7,     8,     9,    -1,    11,
    -1,    13,    -1,    15,    16,    17,    -1,    -1,    -1,    -1,
    22,    23,    24,    -1,    26,    27,    -1,    29,    -1,    31,
    -1,    -1,    34,    -1,    -1,    37,    38,    39,    40,    -1,
    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,    -1,
    -1,    -1,     7,     8,     9,    57,    11,    -1,    13,    -1,
    15,    16,    17,    65,    66,    -1,    21,    22,    23,    24,
    -1,    26,    27,    28,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    42,    43,    44,
    45,    -1,    47,    48,    -1,    -1,    -1,     7,     8,     9,
    -1,    11,    57,    13,    -1,    15,    16,    17,    -1,    -1,
    65,    66,    22,    23,    24,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
    40,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,
    -1,    -1,    62,    -1,    -1,    65,    66,     7,     8,     9,
    -1,    11,    -1,    13,    -1,    15,    16,    17,    -1,    -1,
    -1,    -1,    22,    23,    24,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
    40,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
    -1,    -1,     7,     8,     9,    -1,    11,    57,    13,    -1,
    15,    16,    17,    63,    -1,    65,    66,    22,    23,    24,
    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    42,    43,    44,
    45,    -1,    47,    48,    -1,    -1,    -1,     7,     8,     9,
    -1,    11,    57,    13,    -1,    15,    16,    17,    63,    -1,
    65,    66,    22,    23,    24,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
    40,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
    -1,    -1,     7,     8,     9,    -1,    11,    57,    13,    -1,
    15,    16,    17,    63,    -1,    65,    66,    22,    23,    24,
    -1,    26,    27,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    42,    43,    44,
    45,    -1,    47,    48,    -1,    -1,    -1,     7,     8,     9,
    -1,    11,    57,    13,    -1,    15,    16,    17,    63,    -1,
    65,    66,    22,    23,    24,    -1,    26,    27,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
    40,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
    -1,    -1,     7,     8,     9,    -1,    11,    57,    13,    -1,
    15,    16,    17,    63,    -1,    65,    66,    22,    23,    24,
    -1,    26,    27,    -1,    29,    -1,     7,     8,     9,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    42,    43,    44,
    45,    -1,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    57,    34,    -1,    -1,    37,    38,    39,    40,
    65,    66,    43,    44,    45,    -1,    47,    48,     7,     8,
     9,    46,    47,    48,    49,    -1,    57,    -1,    53,    -1,
    61,    56,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    68,    69,    34,    -1,    -1,    37,    38,
    39,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
     7,     8,     9,    -1,    -1,    -1,    -1,    -1,    57,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    37,    38,    39,    40,    -1,    -1,    43,    44,    45,    -1,
    47,    48,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    65,    66,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    -1,    43,    44,
    45,    -1,    47,    48,     7,     8,     9,    -1,    -1,    -1,
    -1,    -1,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,
    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    37,    38,    39,    40,    -1,    -1,
    43,    44,    45,    -1,    47,    48,     7,     8,     9,    -1,
    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    -1,
    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,    40,
    -1,    -1,    43,    44,    45,    -1,    47,    48,     7,     8,
     9,    -1,    -1,    -1,    -1,    -1,    57,    58,    -1,    -1,
    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,
    39,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
     7,     8,     9,    -1,    -1,    -1,    -1,    -1,    57,    58,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    37,    38,    39,    40,    -1,    -1,    43,    44,    45,    -1,
    47,    48,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    38,    39,    40,    -1,    -1,    43,    44,
    45,    -1,    47,    48,    -1,    -1,    46,    47,    48,    49,
    50,    51,    57,    53,    54,    55,    56,    -1,    58,    59,
    65,    66,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    -1,    59,    -1,    61,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    98,    99,    46,    47,    48,    49,    50,    51,    -1,    53,
    54,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    99,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    -1,    58,    -1,
    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    98,    99,    46,    47,    48,    49,    50,    51,    -1,    53,
    54,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    99,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
    60,    -1,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    -1,    -1,    60,    -1,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    98,    99,    46,    47,    48,    49,    50,    51,    -1,    53,
    54,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    99,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
    -1,    61,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    58,    -1,    -1,    -1,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    98,    99,    46,    47,    48,    49,    50,    51,    -1,    53,
    54,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    99,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    -1,    58,    -1,
    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
    98,    99,    46,    47,    48,    49,    50,    51,    -1,    53,
    54,    55,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,
    64,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    99,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    -1,    -1,    -1,
    -1,    61,    -1,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    99,
    46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,    98,    99,    46,    47,    48,    49,    50,    51,
    -1,    53,    54,    55,    56,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    -1,    -1,    -1,    98,    99,    46,    47,
    48,    49,    50,    51,    -1,    53,    54,    55,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    73,    74,    46,    47,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    86,    87,
    88,    89,    90,    91,    92,    64,    -1,    -1,    67,    68,
    69,    99,    -1,    -1,    73,    74,    46,    47,    48,    49,
    50,    51,    -1,    53,    54,    55,    56,    86,    87,    88,
    89,    90,    -1,    92,    64,    -1,    -1,    67,    68,    69,
    99,    -1,    -1,    73,    74,    46,    47,    48,    49,    50,
    51,    -1,    53,    -1,    55,    56,    86,    87,    88,    89,
    -1,    -1,    92,    64,    -1,    -1,    67,    68,    69,    99,
    -1,    -1,    73,    74,    46,    47,    48,    49,    50,    51,
    -1,    53,    -1,    55,    56,    86,    87,    88,    89,    -1,
    -1,    92,    -1,    -1,    -1,    67,    68,    69,    99,    -1,
    -1,    73,    74,    46,    47,    48,    49,    50,    51,    -1,
    53,    -1,    -1,    56,    86,    87,    88,    89,    -1,    -1,
    92,    -1,    -1,    -1,    67,    68,    69,    99,    -1,    -1,
    73,    74,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,    92,
    52,    -1,    70,    71,    -1,    -1,    99,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    -1,    70,    71,
    -1,    -1,    -1,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    46,    47,    48,    49,    -1,    -1,    -1,
    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
    73,    74
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

}

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 162 "cmdgram.y"
{ ;
    break;}
case 2:
#line 167 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 169 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 174 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 176 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 178 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 183 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 188 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 190 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 195 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 197 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 208 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 210 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 212 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 214 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 216 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 218 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 220 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 222 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 227 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 27:
#line 229 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 28:
#line 231 "cmdgram.y"
{ yyval.stmt = ClientFunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 29:
#line 233 "cmdgram.y"
{ yyval.stmt = ServerFunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 30:
#line 238 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 31:
#line 240 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 32:
#line 245 "cmdgram.y"
{ yyval.var = VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL ); ;
    break;}
case 33:
#line 247 "cmdgram.y"
{ yyval.var = yyvsp[-2].var; ((StmtNode*)(yyvsp[-2].var))->append((StmtNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL ) ); ;
    break;}
case 34:
#line 252 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 35:
#line 257 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 36:
#line 259 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 37:
#line 261 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 38:
#line 263 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 39:
#line 265 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 40:
#line 267 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 41:
#line 272 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 42:
#line 274 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 43:
#line 279 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 44:
#line 281 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 45:
#line 286 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 46:
#line 288 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 47:
#line 293 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 48:
#line 295 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 49:
#line 297 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 50:
#line 299 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 51:
#line 304 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 52:
#line 306 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 53:
#line 311 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 54:
#line 313 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 55:
#line 318 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 56:
#line 320 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 57:
#line 325 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 58:
#line 327 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 59:
#line 329 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 60:
#line 334 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 61:
#line 336 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 62:
#line 341 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 63:
#line 343 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 348 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 65:
#line 350 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 66:
#line 355 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 357 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 359 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 361 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 363 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 365 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 367 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 369 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 74:
#line 374 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 75:
#line 376 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 76:
#line 381 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 77:
#line 386 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 78:
#line 388 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 79:
#line 390 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 80:
#line 392 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 394 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 396 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 398 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 400 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 402 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 404 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 406 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 88:
#line 408 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 89:
#line 410 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 90:
#line 412 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 414 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 416 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 418 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 420 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 422 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 424 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 426 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 428 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 430 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 100:
#line 432 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 101:
#line 434 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 102:
#line 436 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 103:
#line 438 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 104:
#line 440 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 105:
#line 442 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 106:
#line 444 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 107:
#line 446 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 108:
#line 448 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 109:
#line 450 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 110:
#line 452 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 111:
#line 454 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 112:
#line 456 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 113:
#line 458 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 114:
#line 460 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL); ;
    break;}
case 115:
#line 462 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr ); ;
    break;}
case 116:
#line 467 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 117:
#line 469 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-5].expr->dbgLineNumber; yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s.value; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 118:
#line 474 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 119:
#line 476 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 120:
#line 481 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 121:
#line 483 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 122:
#line 488 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 123:
#line 490 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 124:
#line 492 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 125:
#line 494 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 126:
#line 496 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 498 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 500 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 502 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 504 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 506 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 508 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 510 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 515 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 135:
#line 517 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 136:
#line 519 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 137:
#line 521 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr); ;
    break;}
case 138:
#line 523 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 139:
#line 525 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 140:
#line 527 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 141:
#line 529 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 142:
#line 531 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 143:
#line 533 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 144:
#line 538 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 145:
#line 540 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 146:
#line 542 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 147:
#line 547 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 148:
#line 549 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 149:
#line 554 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 150:
#line 556 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 151:
#line 561 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 152:
#line 563 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 153:
#line 568 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 154:
#line 570 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 155:
#line 575 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 156:
#line 577 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 157:
#line 582 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 158:
#line 584 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 159:
#line 586 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 160:
#line 588 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-6].s.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr); ;
    break;}
case 161:
#line 590 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr, yyvsp[-7].i.value); ;
    break;}
case 162:
#line 595 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 163:
#line 597 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 599 "cmdgram.y"


